@c -----------------------------------------------------------------------------
@anchor{max}
@deffn {Function} max (@var{x_1}, @dots{}, @var{x_n})

Return a simplified value for the maximum of the expressions @var{x_1} through
@var{x_n}. For an empty arument list, @code{max} yields @code{minf}.

The option variable @code{maxmin_effort} controls which simplication methods are applied.
Using the default value of @emph{twelve} for @code{maxmin_effort}, @code{max} uses 
@emph{all} availble simplifcation methods. To to inhibit all simplications, set 
@code{maxmin_effort} to zero.

When @code{maxmin_effort} is one or more, for an explict list of real numbers, @code{max} 
returns a number. 

Unless @code{max} needs to simplify a lengthy list of expressions, we suggest using the 
default value of @code{maxmin_effort}. Setting @code{maxmin_effort} to zero (no 
simplications), will cause problems for some Maxima functions; accordingly, generally 
@code{maxmin_effort} should be nonzero.

See also @mref{min}, @mrefdot{lmax}, and @mrefdot{lmin}.

@b{Examples:}

In the first example, setting @code{maxmin_effort} to zero suppresses all simplifcation.
@example
(%i1)	block([maxmin_effort : 0], max(1,2,x,x, max(a,b)));
(%o1)	max(1,2,max(a,b),x,x)

(%i2)	block([maxmin_effort : 1], max(1,2,x,x, max(a,b)));
(%o2)	max(2,a,b,x)
@end example

When @code{maxmin_effort} is two or more, @code{max} compares pairs of members:
@example
(%i1)	block([maxmin_effort : 1], max(x,x+1,x+3));
(%o1)	max(x,x+1,x+3)

(%i2)	block([maxmin_effort : 2], max(x,x+1,x+3));
(%o2)	x+3
@end example

Finally, when @code{maxmin_effort} is three or more, @code{max} compares triples members and
excludes those that are in between; for example
@example
(%i1)	block([maxmin_effort : 4], max(x, 2*x, 3*x, 4*x));
(%o1)	max(x,4*x)
@end example

@opencatbox
@category{Mathematical functions}
@closecatbox
@end deffn

